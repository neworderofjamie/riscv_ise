#include "{{title}}.h"

// Standard C includes
#include <cassert>
#include <cstring>

// RISC-V ISE includes
#include "ise/riscv.h"

{% include 'macros.jinja' %}

//----------------------------------------------------------------------------
// Anonymous namespace
//----------------------------------------------------------------------------
namespace
{
const std::vector<uint32_t> g_ScalarData{
{% filter wordwrap() %}
{% for m in mem_contents %}{{m}}, {% endfor %}};
{% endfilter %}
}

//----------------------------------------------------------------------------
// ArchTest::{{clean_title}}
//----------------------------------------------------------------------------
const std::vector<uint32_t> &ArchTest::{{clean_title}}::getScalarInitData()
{
    return g_ScalarData;
}
//----------------------------------------------------------------------------
std::vector<uint32_t> ArchTest::{{clean_title}}::generateCode(bool simulate)
{
    CodeGenerator c;
    
    // Ready flag is always stored in first word, zero it
    c.sw(Reg::X0, Reg::X0);
    
    {% filter indent(width=4) %}
{{test_code}}
    {% endfilter %}
    
    // If we're simulating, add ecall
    if(simulate) {
        c.ecall();
    }
    // Otherwise
    else {
        // Set ready flag 
        c.li(Reg::X1, 1);
        c.sw(Reg::X1, Reg::X0);
        
        // Infinite loop
        Label spinLoop;
        c.L(spinLoop);
        {
            c.j_(spinLoop);
        }
    }
    return c.getCode();
}
